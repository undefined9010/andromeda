{"version":3,"mappings":"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","names":["coinbaseWallet","parameters","version3","version4","walletProvider","accountsChanged","chainChanged","disconnect","createConnector","config","chainId","rest","provider","accounts","x","getAddress","currentChainId","chain","error","UserRejectedRequestError","_a","preference","createCoinbaseWalletSDK","__vitePreload","addEthereumChainParameter","SwitchChainError","ChainNotConfiguredError","numberToHex","blockExplorerUrls","_b","rpcUrls","_c","_d","addEthereumChain","_error","sdk","CoinbaseWalletSDK","SDK","n","walletExtensionChainId","jsonRpcUrl"],"ignoreList":[0],"sources":["../../node_modules/@wagmi/connectors/dist/esm/coinbaseWallet.js"],"sourcesContent":["import { ChainNotConfiguredError, createConnector, } from '@wagmi/core';\nimport { SwitchChainError, UserRejectedRequestError, getAddress, numberToHex, } from 'viem';\ncoinbaseWallet.type = 'coinbaseWallet';\nexport function coinbaseWallet(parameters = {}) {\n    if (parameters.version === '3' || parameters.headlessMode)\n        return version3(parameters);\n    return version4(parameters);\n}\nfunction version4(parameters) {\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return createConnector((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        rdns: 'com.coinbase.wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId, ...rest } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                    params: 'instantOnboarding' in rest && rest.instantOnboarding\n                        ? [{ onboarding: 'instant' }]\n                        : [],\n                })).map((x) => getAddress(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(error.message))\n                    throw new UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close?.();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => getAddress(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = (await provider.request({\n                method: 'eth_chainId',\n            }));\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                const preference = (() => {\n                    if (typeof parameters.preference === 'string')\n                        return { options: parameters.preference };\n                    return {\n                        ...parameters.preference,\n                        options: parameters.preference?.options ?? 'all',\n                    };\n                })();\n                const { createCoinbaseWalletSDK } = await import('@coinbase/wallet-sdk');\n                const sdk = createCoinbaseWalletSDK({\n                    ...parameters,\n                    appChainIds: config.chains.map((x) => x.id),\n                    preference,\n                });\n                walletProvider = sdk.getProvider();\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new SwitchChainError(new ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: numberToHex(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: numberToHex(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new UserRejectedRequestError(error);\n                    }\n                }\n                throw new SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => getAddress(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\nfunction version3(parameters) {\n    const reloadOnDisconnect = false;\n    let sdk;\n    let walletProvider;\n    let accountsChanged;\n    let chainChanged;\n    let disconnect;\n    return createConnector((config) => ({\n        id: 'coinbaseWalletSDK',\n        name: 'Coinbase Wallet',\n        type: coinbaseWallet.type,\n        async connect({ chainId } = {}) {\n            try {\n                const provider = await this.getProvider();\n                const accounts = (await provider.request({\n                    method: 'eth_requestAccounts',\n                })).map((x) => getAddress(x));\n                if (!accountsChanged) {\n                    accountsChanged = this.onAccountsChanged.bind(this);\n                    provider.on('accountsChanged', accountsChanged);\n                }\n                if (!chainChanged) {\n                    chainChanged = this.onChainChanged.bind(this);\n                    provider.on('chainChanged', chainChanged);\n                }\n                if (!disconnect) {\n                    disconnect = this.onDisconnect.bind(this);\n                    provider.on('disconnect', disconnect);\n                }\n                // Switch to chain if provided\n                let currentChainId = await this.getChainId();\n                if (chainId && currentChainId !== chainId) {\n                    const chain = await this.switchChain({ chainId }).catch((error) => {\n                        if (error.code === UserRejectedRequestError.code)\n                            throw error;\n                        return { id: currentChainId };\n                    });\n                    currentChainId = chain?.id ?? currentChainId;\n                }\n                return { accounts, chainId: currentChainId };\n            }\n            catch (error) {\n                if (/(user closed modal|accounts received is empty|user denied account)/i.test(error.message))\n                    throw new UserRejectedRequestError(error);\n                throw error;\n            }\n        },\n        async disconnect() {\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n            provider.disconnect();\n            provider.close();\n        },\n        async getAccounts() {\n            const provider = await this.getProvider();\n            return (await provider.request({\n                method: 'eth_accounts',\n            })).map((x) => getAddress(x));\n        },\n        async getChainId() {\n            const provider = await this.getProvider();\n            const chainId = await provider.request({\n                method: 'eth_chainId',\n            });\n            return Number(chainId);\n        },\n        async getProvider() {\n            if (!walletProvider) {\n                // Unwrapping import for Vite compatibility.\n                // See: https://github.com/vitejs/vite/issues/9703\n                const CoinbaseWalletSDK = await (async () => {\n                    const { default: SDK } = await import('cbw-sdk');\n                    if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n                        return SDK.default;\n                    return SDK;\n                })();\n                sdk = new CoinbaseWalletSDK({ ...parameters, reloadOnDisconnect });\n                // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n                const walletExtensionChainId = sdk.walletExtension?.getChainId();\n                const chain = config.chains.find((chain) => parameters.chainId\n                    ? chain.id === parameters.chainId\n                    : chain.id === walletExtensionChainId) || config.chains[0];\n                const chainId = parameters.chainId || chain?.id;\n                const jsonRpcUrl = parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0];\n                walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId);\n            }\n            return walletProvider;\n        },\n        async isAuthorized() {\n            try {\n                const accounts = await this.getAccounts();\n                return !!accounts.length;\n            }\n            catch {\n                return false;\n            }\n        },\n        async switchChain({ addEthereumChainParameter, chainId }) {\n            const chain = config.chains.find((chain) => chain.id === chainId);\n            if (!chain)\n                throw new SwitchChainError(new ChainNotConfiguredError());\n            const provider = await this.getProvider();\n            try {\n                await provider.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [{ chainId: numberToHex(chain.id) }],\n                });\n                return chain;\n            }\n            catch (error) {\n                // Indicates chain is not added to provider\n                if (error.code === 4902) {\n                    try {\n                        let blockExplorerUrls;\n                        if (addEthereumChainParameter?.blockExplorerUrls)\n                            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                        else\n                            blockExplorerUrls = chain.blockExplorers?.default.url\n                                ? [chain.blockExplorers?.default.url]\n                                : [];\n                        let rpcUrls;\n                        if (addEthereumChainParameter?.rpcUrls?.length)\n                            rpcUrls = addEthereumChainParameter.rpcUrls;\n                        else\n                            rpcUrls = [chain.rpcUrls.default?.http[0] ?? ''];\n                        const addEthereumChain = {\n                            blockExplorerUrls,\n                            chainId: numberToHex(chainId),\n                            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                            iconUrls: addEthereumChainParameter?.iconUrls,\n                            nativeCurrency: addEthereumChainParameter?.nativeCurrency ??\n                                chain.nativeCurrency,\n                            rpcUrls,\n                        };\n                        await provider.request({\n                            method: 'wallet_addEthereumChain',\n                            params: [addEthereumChain],\n                        });\n                        return chain;\n                    }\n                    catch (error) {\n                        throw new UserRejectedRequestError(error);\n                    }\n                }\n                throw new SwitchChainError(error);\n            }\n        },\n        onAccountsChanged(accounts) {\n            if (accounts.length === 0)\n                this.onDisconnect();\n            else\n                config.emitter.emit('change', {\n                    accounts: accounts.map((x) => getAddress(x)),\n                });\n        },\n        onChainChanged(chain) {\n            const chainId = Number(chain);\n            config.emitter.emit('change', { chainId });\n        },\n        async onDisconnect(_error) {\n            config.emitter.emit('disconnect');\n            const provider = await this.getProvider();\n            if (accountsChanged) {\n                provider.removeListener('accountsChanged', accountsChanged);\n                accountsChanged = undefined;\n            }\n            if (chainChanged) {\n                provider.removeListener('chainChanged', chainChanged);\n                chainChanged = undefined;\n            }\n            if (disconnect) {\n                provider.removeListener('disconnect', disconnect);\n                disconnect = undefined;\n            }\n        },\n    }));\n}\n//# sourceMappingURL=coinbaseWallet.js.map"],"file":"assets/index-DTHXuou3.js"}